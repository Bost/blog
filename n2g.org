#+TITLE: N2G
# #+SUBTITLE: /Some subtitle/
# #+SETUPFILE: setup.org
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper, 11pt]
#+AUTHOR: Rostislav Svoboda
#+DATE: {{{time(%B %d\, %Y)}}}
#+OPTIONS: toc:nil html-postamble:nil
# See https://orgmode.org/manual/Publishing-options.html
# #+OPTIONS: html-postamble:"<p class=\"author\">%a (%e)</p><p class=\"date\">Last modified: %C</p>"
# #+HTML_HEAD: <style>#postamble { display:none; }</style>

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style.css" />
#+HTML_HEAD_EXTRA: <style> body { /* some ad-hoc css styling */ } </style>
# #+HTML_HEAD_EXTRA: <div style="display: none">\( \newcommand{\bijection}{\mathbin{\rightarrowtail \hspace{-10pt} \twoheadrightarrow}} \)</div>
# #+HTML_HEAD_EXTRA: <div style="display: none">\( \newcommand{\bijection}{\mathrel{\rlap{\rightarrowtail}}\mathrel{\mkern2mu\twoheadrightarrow}} \)</div>
#+HTML_HEAD_EXTRA: <div style="display: none">\( \newcommand{\bijection}{\leftrightarrow} \)</div>
#+HTML_HEAD_EXTRA: <div style="display: none">\( \newcommand{\inv}[1]{#1^{-1}} \)</div>

* Normalizing and Commonalities
Define: \\
- Sets of package-names $N$, $N'$ of packages available for Nix and $G$, $G'$ of
  packages available for Guix:
      \begin{align*}
          N  &= \{p_{N_1}  \dots p_{N_n}  \} \\
          N' &= \{p'_{N_1} \dots p'_{N_n} \} \\
          G  &= \{p_{G_1}  \dots p_{G_m}  \} \\
          G' &= \{p'_{G_1} \dots p'_{G_m} \} \\
      \end{align*}
  such that $N, N', G, G' \subseteq \Sigma^*$ (i.e. elements are strings) and
  their cardinalities are $|N| = |N'|, |G| = |G'|$.

- Bijective functions for normalizing and inversed functions for un-normalizing
  package-names for Nix and Guix with signatures:
      \begin{gather*}
          f_{pN} : N \bijection N' : \inv{f_{pN}} \\
          f_{pG} : G \bijection G' : \inv{f_{pG}}
      \end{gather*}
  defined as
  # Normalize the package-names of both lists $N$, $G$ and turn the normalized
  # lists into Sets:
      \begin{align*}
           \forall n  \in N  &, f_{nN}(n)        &= TODO \\
           \forall n' \in G' &, \inv{f_{nN}}(n') &= TODO \\
           \forall g  \in G  &, f_{nG}(g)        &= TODO \\
           \forall g' \in G' &, \inv{f_{nG}}(g') &= TODO \\
      \end{align*}
  where codomains of $f_{pN}$, $f_{pG}$ are sets of normalized package-names
      \begin{align*}
          N' &= \{ f_{pN}(n) \mid n \in N \} \\
          G' &= \{ f_{pG}(g) \mid g \in G \}
      \end{align*}
  where codomains of $\inv{f_{pN}}$, $\inv{f_{pG}}$ are sets of un-normalized
  package-names
      \begin{align*}
          N &= \{ \inv{f_{pN}}(n') \mid n' \in N' \} \\
          G &= \{ \inv{f_{pG}}(g') \mid g' \in G' \}
      \end{align*}
  \\
  Idea: use package git repository URL and commit ID for normalization.

- The intersection $P'$
      \begin{align*}
          P' = N' \cap G'
      \end{align*}
  is a set of normalized names of packages available in both operating systems.
  # Cardinality invariant : $|P'| \leq |N'| \land |P'| \leq |G'|$

*  Package complexity and Ordering
Define: \\
- Functions for computing package definition complexity in Nix and Guix with
  signatures:
      \begin{align*}
          f_{cN} : P' \rightarrow \mathbb{N} \\
          f_{cG} : P' \rightarrow \mathbb{N}
      \end{align*}
  defined as "The more complex a package definition is the higher complexity
  level the it has." \\
      \begin{align*}
          \forall p'\in P', f_{cN}(p') = TODO \\
          \forall p'\in P', f_{cG}(p') = TODO
      \end{align*}
  where the domains of $f_{cN}$, $f_{cG}$ are sets of complexities
      \begin{align*}
           C_{N} = \{ f_{cN}(p') \mid p' \in P' \} &= \{1 \ldots n_{N}\} \\
           C_{G} = \{ f_{cG}(p') \mid p' \in P' \} &= \{1 \ldots m_{G}\}
      \end{align*}
  Complexity $0$ would mean "package undefined in a given operating system".

However the basic complexity levels $C_{N}$ in Nix and $C_{G}$ in Guix have
(probably) different cardinalities $|C_{N}| \neq |C_{G}|$ i.e. $n_N \neq m_G$,
since they are independent from each other and must be further normalized. I.e.
some mapping (e.g. grouping of the basic levels) must be defined so that the
normalized complexity levels correspond to each other. \\

It will be probably a surjective mapping since all complexity levels of $C_{G}$
must be covered
\\
For that purpose define:
- Normalization domain $C = C_{G}$
- Normalization functions with signatures
      \begin{align*}
         f_{nN} : C_{N} \rightarrow C \\
         f_{nG} : C_{G} \rightarrow C
      \end{align*}
  I.e.
      \begin{align*}
         f_{nN} & : C_{N} \twoheadrightarrow C_{G} & & \text{ surjection} \\
         f_{nG} & : C_{G} \xrightarrow{id} C_{G}   & & \text{ identity}   \\
      \end{align*}
  defined as
      \begin{align*}
         \forall c_{N} \in C_{N}, f_{nN}(c_{N}) &= TODO \\
         \forall c_{G} \in C_{G}, f_{nG}(c_{G}) &= \mathrm{id}(c_{G}) = c_{G}
      \end{align*}
  where the domains of $f_{nN}$, $f_{nG}$ are sets
      \begin{align*}
          C = C_{G} &= \{ f_{nN}(c_{N}) \mid c_{N} \in C_{N} \} \\
                    &= \{ f_{cG}(p') \mid p' \in P' \} \\
                    &= \{0 \ldots m_{G}\}
      \end{align*}

# TODO for normalized complexities use $\bar{c}$ or $\vec{c}$

- The complexity normalization enables us to derive a function for computing
  complexity distances
  # for every package $p \in P$
      \begin{align*}
         f_{d} : P' \rightarrow \mathbb{N} \\
      \end{align*}
  defined as
      \begin{align*}
           \forall p' \in P', f_{d}(p') = \|f_{nN}(p') - f_{nG}(p')\| \\
      \end{align*}
  where the domain of $f_{d}$ is a set of distances
      \begin{align*}
           D = \{ f_{d}(p') \mid p' \in P' \} = \{ 0 \dots n\}
      \end{align*}
  where $n = \max(n_{N}, m_{G})$.
  # In fact the $n_{N}$, $m_{G}$

- For every level of complexity $c_i \in C = \{1 \ldots n\}$ ($0$ means "package
  undefined in a given OS") select packages from $P$ which have the same
  distance, i.e. $f_{d}(p'_{c_i}) = 0$.

  IOW divide the packages present in both operating systems into groups of the
  same complexity:
      \begin{align*}
        \forall c_i \in C = \{1 \ldots n\}, \\
          P'_{c_1d_0} = \{ p'_{c_1} \in P' & \mid f_{d}(p'_{c_1}) = 0\} \\
          \vdots \\
          P'_{c_nd_0} = \{ p'_{c_n} \in P' & \mid f_{d}(p'_{c_n}) = 0\}
      \end{align*}

      # \begin{align*}
      #     f_{d}(p'_{c_i}) = 0
      # \end{align*}

* Conversion
- For every element of every group find the un-normalized packages in Nix and
  in Guix
      # \begin{align*}
      #     \forall p'_{c_i} \in P'_{c_id_0}, \inv{f_{pN}}(p'_{c_i}) = N_{c_i}, \inv{f_{pG}}(p'_{c_i}) = G_{c_i} \\
      # \end{align*}
      \begin{align*}
          \forall p'_{c_i} \in P'_{c_id_0}, \\
            \inv{f_{pN}}(p'_{c_i}) &= N_{c_i} \\
            \inv{f_{pG}}(p'_{c_i}) &= G_{c_i} \\
      \end{align*}
  and convert them using function with signature
      \begin{align*}
            t: N_{c_i} \rightarrow G_{c_i}
      \end{align*}
  defined as
  # where the domain and codomain are defined above
      \begin{align*}
          \forall n_{c_i} \in N_{c_id_0}, t(n_{c_i}) = TODO \\
      \end{align*}

  This conversion $t$ should be relatively simple.
- Convert the packages which definitions complexity significantly differs
  between the operating systems.
  + Simple on Nix (low $_{c}$ level), complex on Guix (high $_{c}$ level)
  + Complex on Nix (high $_{c}$ level), simple on Guix (low $_{c}$ level)
  This transformation / translation may not be that easy.

# ** NN training
# - find, i.e. ask which is the appropriate NN type?
# - split to train and test data.


# ** Ordering relations / predicates with signatures
#       \begin{align*}
#           \leq_N : P' \times P' \rightarrow \mathbb{B} \\
#           \leq_G : P' \times P' \rightarrow \mathbb{B}
#       \end{align*}
#     defined as
#       \begin{align*}
#           \forall p'_i\in P', \forall p'_j \in P', \leq_N = TODO \\
#           \forall p'_i\in P', \forall p'_j \in P', \leq_G = TODO
#       \end{align*}
#     where the domains of $\leq_N$, $\leq_G$ are sets
#       \begin{align*}
#           O_N = \{ p'_i \leq_N p'_j \mid p'_i \in P' \land p'_j \in P' \} = \{ \top, \bot \} \\
#           O_G = \{ p'_i \leq_G p'_j \mid p'_i \in P' \land p'_j \in P' \} = \{ \top, \bot \}
#       \end{align*}

#     for package definition complexity for Nix and Guix.

#     Order the intersection of normalized names $P$ by $\leq_N$ and $\leq_G$:
#       \begin{align*}
#           P'_{\leq_N} &= (P', \leq_N) \implies C_{N} = \{1, \ldots, n_N\} \\
#           P'_{\leq_G} &= (P', \leq_G) \implies C_{G} = \{1, \ldots, m_G\}
#       \end{align*}

#   $P_{\leq_N}$, $P_{\leq_G}$ are index by the order relations giving their
#   elements an index in the $C_{N}$, $C_{G}$.
